class UF:
    def __init__(self,N):
        self.F=[-1]*(N*4)

    def find(self,x):
        if self.F[x]==-1:
            return x
        self.F[x]=self.find(self.F[x])
        return self.F[x]

    def join(self,x,y):
        t1=self.find(x)
        t2=self.find(y)
        if t1!=t2:
            self.F[t2]=t1


def getid(x,y):
    #每走一步都有4个可能的位置，tot表示可能位置总数，所以是UF里面F的大小为4N
    p=(x,y)
    global P2id,id2P,tot
    if p not in P2id.keys():
        P2id[p]=tot
        id2P[tot]=p
        tot+=1
    return P2id[p]


def gao(x,y):
    global P2id,id2P,tot
    now=getid(x,y)
    w=getid(x,y-1)
    e=getid(x,y+1)
    n=getid(x-1,y)
    s=getid(x+1,y)
    West.join(w,now)
    East.join(e,now)
    North.join(n,now)
    South.join(s,now)

def getnext(x,y,s):
    global id2P
    now=getid(x,y)
    if s=='N':
        nextid=North.find(now)
    elif s=='S':
        nextid=South.find(now)
    elif s=='E':
        nextid=East.find(now)
    else:
        nextid=West.find(now)
    return id2P[nextid]

T=int(input())
for t in range(T):
    number, R, C, SR, SC = map(int, input().split(' '))
    command = input().strip()
    North, East, South, West = UF(number), UF(number), UF(number), UF(number)
    P2id = {}
    id2P = {}
    tot=0
    gao(SR,SC)
    now=(SR,SC)
    for i in command:
        now=getnext(now[0],now[1],i)
        gao(now[0],now[1])
    print("Case #%d: %d %d"%(t+1,now[0],now[1]))
